/* -*- c++ -*- */
/* 
 * Copyright 2018 <+YOU OR YOUR COMPANY+>.
 * 
 * This is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3, or (at your option)
 * any later version.
 * 
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this software; see the file COPYING.  If not, write to
 * the Free Software Foundation, Inc., 51 Franklin Street,
 * Boston, MA 02110-1301, USA.
 */

#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <gnuradio/io_signature.h>
#include "lrtc_mod_bc_impl.h"

namespace gr {
  namespace dslwp {

    lrtc_mod_bc::sptr
    lrtc_mod_bc::make()
    {
      return gnuradio::get_initial_sptr
        (new lrtc_mod_bc_impl());
    }

    /*
     * The private constructor
     */
    lrtc_mod_bc_impl::lrtc_mod_bc_impl()
      : gr::sync_interpolator("lrtc_mod_bc",
              gr::io_signature::make(1, 1, sizeof(char)),
              gr::io_signature::make(1, 1, sizeof(gr_complex)), 256)
    {
      d_pacc = 0.0f;
      d_dp = 101.0f/256.0f*M_PI; //d_dp = 1.2394; f_dev = d_dp/2/pi*2000Hz = 394.53 Hz
    }

    /*
     * Our virtual destructor.
     */
    lrtc_mod_bc_impl::~lrtc_mod_bc_impl()
    {
    }

    int
    lrtc_mod_bc_impl::work(int noutput_items,
        gr_vector_const_void_star &input_items,
        gr_vector_void_star &output_items)
    {
      const char *in = (const char *) input_items[0];
      gr_complex *out = (gr_complex *) output_items[0];
      int i, j;

      static gr_complex asm32[] = 
      {
        0.986752-0.162236j, 0.961165-0.275976j, 0.909253-0.416245j, 0.823810-0.566866j, 0.704089-0.710112j, 0.554654-0.832081j, 0.382467-0.923969j, 0.195050-0.980793j, 
        -0.000006-1.000000j, -0.195091-0.980785j, -0.382683-0.923880j, -0.555570-0.831470j, -0.707107-0.707107j, -0.831470-0.555570j, -0.923879-0.382684j, -0.980785-0.195092j, 
        -1.000000-0.000012j, -0.980801+0.195010j, -0.924059+0.382250j, -0.832692+0.553737j, -0.713104+0.701059j, -0.578055+0.815998j, -0.449249+0.893407j, -0.354950+0.934885j, 
        -0.320174+0.947359j, -0.354950+0.934885j, -0.449249+0.893407j, -0.578055+0.815998j, -0.713104+0.701059j, -0.832692+0.553737j, -0.924059+0.382250j, -0.980801+0.195012j, 
        -1.000000-0.000000j, -0.980801-0.195012j, -0.924059-0.382250j, -0.832692-0.553737j, -0.713104-0.701059j, -0.578055-0.815998j, -0.449249-0.893407j, -0.354949-0.934886j, 
        -0.320163-0.947363j, -0.354874-0.934914j, -0.448830-0.893617j, -0.576256-0.817269j, -0.707107-0.707107j, -0.817269-0.576256j, -0.893617-0.448830j, -0.934915-0.354872j, 
        -0.947366-0.320152j, -0.934915-0.354872j, -0.893617-0.448830j, -0.817269-0.576256j, -0.707107-0.707107j, -0.576256-0.817269j, -0.448830-0.893617j, -0.354872-0.934915j, 
        -0.320152-0.947366j, -0.354872-0.934915j, -0.448830-0.893617j, -0.576256-0.817269j, -0.707107-0.707107j, -0.817269-0.576256j, -0.893617-0.448830j, -0.934914-0.354874j, 
        -0.947363-0.320163j, -0.934886-0.354949j, -0.893407-0.449249j, -0.815998-0.578055j, -0.701059-0.713104j, -0.553737-0.832692j, -0.382250-0.924059j, -0.195012-0.980801j, 
        -0.000000-1.000000j, 0.195012-0.980801j, 0.382250-0.924059j, 0.553737-0.832692j, 0.701059-0.713104j, 0.815998-0.578055j, 0.893407-0.449249j, 0.934885-0.354950j, 
        0.947359-0.320174j, 0.934885-0.354950j, 0.893407-0.449249j, 0.815998-0.578055j, 0.701059-0.713104j, 0.553737-0.832692j, 0.382250-0.924059j, 0.195012-0.980801j, 
        -0.000000-1.000000j, -0.195012-0.980801j, -0.382250-0.924059j, -0.553737-0.832692j, -0.701059-0.713104j, -0.815998-0.578055j, -0.893407-0.449249j, -0.934885-0.354950j, 
        -0.947359-0.320174j, -0.934885-0.354950j, -0.893407-0.449249j, -0.815998-0.578055j, -0.701059-0.713104j, -0.553737-0.832692j, -0.382250-0.924059j, -0.195010-0.980801j, 
        0.000012-1.000000j, 0.195092-0.980785j, 0.382684-0.923879j, 0.555570-0.831470j, 0.707107-0.707107j, 0.831470-0.555570j, 0.923880-0.382683j, 0.980785-0.195090j, 
        1.000000-0.000000j, 0.980785+0.195090j, 0.923880+0.382683j, 0.831470+0.555570j, 0.707107+0.707107j, 0.555570+0.831470j, 0.382683+0.923880j, 0.195090+0.980785j, 
        0.000000+1.000000j, -0.195090+0.980785j, -0.382683+0.923880j, -0.555570+0.831470j, -0.707107+0.707107j, -0.831470+0.555570j, -0.923880+0.382683j, -0.980785+0.195090j, 
        -1.000000+0.000000j, -0.980785-0.195090j, -0.923880-0.382683j, -0.831470-0.555570j, -0.707107-0.707107j, -0.555570-0.831470j, -0.382683-0.923880j, -0.195090-0.980785j, 
        -0.000000-1.000000j, 0.195090-0.980785j, 0.382683-0.923880j, 0.555570-0.831470j, 0.707107-0.707107j, 0.831470-0.555570j, 0.923880-0.382683j, 0.980785-0.195090j, 
        1.000000-0.000000j, 0.980785+0.195090j, 0.923880+0.382683j, 0.831470+0.555570j, 0.707107+0.707107j, 0.555570+0.831470j, 0.382683+0.923880j, 0.195090+0.980785j, 
        0.000000+1.000000j, -0.195090+0.980785j, -0.382683+0.923880j, -0.555570+0.831470j, -0.707107+0.707107j, -0.831470+0.555570j, -0.923880+0.382683j, -0.980785+0.195090j, 
        -1.000000+0.000000j, -0.980785-0.195090j, -0.923880-0.382683j, -0.831470-0.555570j, -0.707107-0.707107j, -0.555570-0.831470j, -0.382684-0.923879j, -0.195092-0.980785j, 
        -0.000012-1.000000j, 0.195010-0.980801j, 0.382250-0.924059j, 0.553737-0.832692j, 0.701059-0.713104j, 0.815998-0.578055j, 0.893407-0.449249j, 0.934885-0.354950j, 
        0.947359-0.320174j, 0.934885-0.354950j, 0.893407-0.449249j, 0.815998-0.578055j, 0.701059-0.713104j, 0.553737-0.832692j, 0.382250-0.924059j, 0.195010-0.980801j, 
        -0.000012-1.000000j, -0.195092-0.980785j, -0.382684-0.923879j, -0.555570-0.831470j, -0.707107-0.707107j, -0.831470-0.555570j, -0.923880-0.382683j, -0.980785-0.195090j, 
        -1.000000+0.000000j, -0.980785+0.195090j, -0.923880+0.382683j, -0.831470+0.555570j, -0.707107+0.707107j, -0.555570+0.831470j, -0.382683+0.923880j, -0.195090+0.980785j, 
        0.000000+1.000000j, 0.195090+0.980785j, 0.382683+0.923880j, 0.555570+0.831470j, 0.707107+0.707107j, 0.831470+0.555570j, 0.923879+0.382684j, 0.980785+0.195092j, 
        1.000000+0.000012j, 0.980801-0.195010j, 0.924059-0.382250j, 0.832692-0.553737j, 0.713104-0.701059j, 0.578055-0.815998j, 0.449249-0.893407j, 0.354950-0.934885j, 
        0.320174-0.947359j, 0.354950-0.934885j, 0.449249-0.893407j, 0.578055-0.815998j, 0.713104-0.701059j, 0.832692-0.553737j, 0.924059-0.382250j, 0.980801-0.195010j, 
        1.000000+0.000012j, 0.980785+0.195092j, 0.923879+0.382684j, 0.831470+0.555570j, 0.707107+0.707107j, 0.555570+0.831470j, 0.382684+0.923879j, 0.195092+0.980785j, 
        0.000012+1.000000j, -0.195010+0.980801j, -0.382250+0.924059j, -0.553737+0.832692j, -0.701059+0.713104j, -0.815998+0.578055j, -0.893407+0.449249j, -0.934886+0.354949j, 
        -0.947363+0.320163j, -0.934914+0.354874j, -0.893617+0.448830j, -0.817269+0.576256j, -0.707107+0.707107j, -0.576256+0.817269j, -0.448830+0.893617j, -0.354873+0.934914j, 
        -0.320157+0.947364j, -0.354911+0.934900j, -0.449039+0.893512j, -0.577156+0.816634j, -0.710112+0.704089j, -0.825057+0.565049j, -0.909448+0.415819j, -0.961187+0.275898j
      };

      // Do <+signal processing+>
      for(i=0; i<noutput_items/256; i++)
      {
        float dp = in[i]?d_dp:-d_dp;
        for(j=0; j<256; j++)
        {
          out[i*256+j] = (asm32[j].real() * cos(d_pacc) - asm32[j].imag() * sin(d_pacc)) + 1i * (asm32[j].real() * sin(d_pacc) + asm32[j].imag() * cos(d_pacc));

          d_pacc = d_pacc + dp;

          if(d_pacc > M_PI)
          {
	          d_pacc -= 2.0f*M_PI;
          }
          else if(d_pacc < -M_PI)
          {
	          d_pacc += 2.0f*M_PI;
          }
        }
      }    

      // Tell runtime system how many output items we produced.
      return noutput_items;
    }

  } /* namespace dslwp */
} /* namespace gr */

